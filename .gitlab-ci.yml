image: maven:3.9.9-eclipse-temurin-17

stages: # List of stages for jobs, and their order of execution
  - build
  - test
  - upload
  - deploy

build-job: # This job runs in the build stage, which runs first.
  stage: build
  script:
    - mv src/main/resources/application.properties.bk src/main/resources/application.properties
    - echo "Compiling the code..."
    - mvn clean package
    - echo "Compile complete."
  artifacts:
    paths:
      - target/Fishing-App-0.0.1-SNAPSHOT.jar

# unit-test-job: # This job runs in the test stage.
#   image: openjdk:17-slim 
#   before_script:
#     - apt-get update && apt-get install -y curl
#   script:
#     - echo "Renaming File..."
#     - mv src/main/resources/application.properties.bk src/main/resources/application.properties
#     - echo "Done..."
#     - echo "$DB_NAME"
#     - echo "$DB_USER"
#     - echo "$DB_HOST"
#     - echo "Starting Application...This will Take Around 30 Seconds..."
#     - java -jar target/Fishing-App-0.0.1-SNAPSHOT.jar &
#     - sleep 30
#     - echo "Testing '/actuator' Endpoint... "
#     - curl -s http://localhost:8080/actuator/health | grep "UP"
#     - echo "THE APP STARTED SUCCESSFULLY!!.."

upload-to-s3-job:
  image: 
    name: amazon/aws-cli
    entrypoint: ['']
  stage: upload
  script:
    - echo "copying to s3"
    - aws s3 cp target/Fishing-App-0.0.1-SNAPSHOT.jar s3://fishingappjars/fishingAppJar$CI_COMMIT_SHORT_SHA.jar
    - aws s3 ls s3://fishingappjars

deploy-to-aws-job:
  image:
    name: amazon/aws-cli
    entrypoint: ['']
  stage: deploy
  script:
    - echo "setting access key id"
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - echo "setting access key"
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - echo "setting region"
    - aws configure set default.region $AWS_DEFAULT_REGION

    # Create a new launch template version with embedded user data
    - |
      USERDATA=$(echo -n "#!/bin/bash
      aws s3 cp s3://fishingappjars/fishingAppJar$CI_COMMIT_SHORT_SHA.jar /opt/app/app.jar
      export DB_HOST=$DB_HOST
      export DB_USER=$DB_USER
      export DB_PASS=$DB_PASS
      export DB_IP=$DB_IP
      export DB_NAME=$DB_NAME
      export JWT_SECRET=$JWT_SECRET
      export MYSQL_PWD=$MYSQLPWD
      
      
      java -jar /opt/app/app.jar" | base64 -w 0)
    
     # Get the latest version number
    - LATEST_VERSION=$(aws ec2 describe-launch-templates --launch-template-names FishingApp-LT | jq -r '.LaunchTemplates[0].LatestVersionNumber')

    # Create new version with updated user data
    - |
      NEW_VERSION=$(aws ec2 create-launch-template-version \
        --launch-template-name FishingApp-LT \
        --version-description "Updated with latest JAR from $CI_COMMIT_SHORT_SHA" \
        --source-version $LATEST_VERSION \
        --launch-template-data "{\"UserData\": \"$USERDATA\"}" \
        --query 'LaunchTemplateVersion.VersionNumber' \
        --output text)

    # Set the new version as default
    - |
      aws ec2 modify-launch-template \
        --launch-template-name FishingApp-LT \
        --default-version $NEW_VERSION

    # Start an instance refresh with 100% minimum healthy percentage
    - |
      aws autoscaling start-instance-refresh \
        --auto-scaling-group-name Fishing-App-ASG \
        --preferences '{"MinHealthyPercentage": 100, "InstanceWarmup": 300}'

#lint-test-job: # This job also runs in the test stage.
#  stage: test    # It can run at the same time as unit-test-job (in parallel).
#  script:
#    - echo "Linting code... This will take about 5 seconds."
#    - sleep 5
#    - echo "No lint issues found."
#
#deploy-job: # This job runs in the deploy stage.
#  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#  environment: production
#  script:
#    - echo "Deploying application..."
#    - echo "Application successfully deployed."